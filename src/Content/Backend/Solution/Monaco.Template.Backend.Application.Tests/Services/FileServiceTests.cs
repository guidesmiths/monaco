using MockQueryable.Moq;
using Monaco.Template.Backend.Application.Infrastructure.Context;
using Monaco.Template.Backend.Application.Services;
using Monaco.Template.Backend.Common.BlobStorage.Contracts;
using Monaco.Template.Backend.Domain.Model;
using Moq;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Xunit;

namespace Monaco.Template.Backend.Application.Tests.Services;

[ExcludeFromCodeCoverage]
public class FileServiceTests
{
	[Trait("Application Services", "File Service")]
	[Fact(DisplayName = "Upload image succeeds")]
	public async Task UploadImageSucceeds()
	{
		var dbContextMock = new Mock<AppDbContext>();
		var imageDbSetMock = new List<Image>().AsQueryable().BuildMockDbSet();
		dbContextMock.Setup(x => x.Set<Image>())
					 .Returns(imageDbSetMock.Object);
		var blobStorageServiceMock = new Mock<IBlobStorageService>();

		var sut = new FileService(dbContextMock.Object, blobStorageServiceMock.Object);

		const string imgBase64 = "";

		await using var stream = new MemoryStream(Convert.FromBase64String(imgBase64));
		await sut.UploadImage(stream, "sample-image.png", "image/png", CancellationToken.None);
		stream.Close();

		blobStorageServiceMock.Verify(x => x.UploadTempFileAsync(It.IsAny<Stream>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<CancellationToken>()), Times.Exactly(2));
		dbContextMock.Verify(x => x.Set<Image>().AddAsync(It.IsAny<Image>(), It.IsAny<CancellationToken>()));
		dbContextMock.Verify(x => x.SaveEntitiesAsync(It.IsAny<CancellationToken>()));
	}
}